{"version":3,"sources":["redux/actions.js","components/TodoItem.jsx","components/TodoList.jsx","components/TodoInput.jsx","App.js","reportWebVitals.js","redux/states.js","redux/store.js","redux/reducer.js","index.js"],"names":["ADD_TODO","DELETE_TODO","UPDATE_TODO","TodoItem","todo","useState","editable","setEditable","name","setName","dispatch","useDispatch","className","type","value","onChange","e","target","onClick","console","log","payload","updateTodo","todoId","id","TodoList","props","todos","useSelector","state","map","TodoInput","uuid","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","store","createStore","newTodos","action","push","filter","index","i","length","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4OAAaA,EAAc,WACdC,EAAc,cACdC,EAAc,c,qBCiDZC,MA7Cf,YAA2B,IAARC,EAAO,EAAPA,KAAO,EACUC,oBAAS,GADnB,mBACfC,EADe,KACLC,EADK,OAEEF,mBAASD,EAAKI,MAFhB,mBAEfA,EAFe,KAETC,EAFS,KAGlBC,EAAWC,cACf,OACI,8BACI,qBAAKC,UAAU,8BAAf,SACA,eAAC,WAAD,WACI,8BAAM,cAAC,IAAD,MACN,qBAAKA,UAAU,MAAf,SACEN,EACF,uBACAO,KAAK,OACLD,UAAU,eACVE,MAAON,EACPO,SACI,SAACC,GAAD,OAAOP,EAAQO,EAAEC,OAAOH,UACpB,6BAAKV,EAAKI,SAElB,wBACAU,QAAS,WACLC,QAAQC,IAAI,UACZV,EDRb,SAAoBN,GACvB,MAAM,CACFS,KAAKX,EACLmB,QAASjB,GCKYkB,CAAW,2BAETlB,GAFQ,IAGXI,KAAKA,MAGVF,GACCG,EAAQL,EAAKI,MAEhBD,GAAaD,IAGlBM,UAAU,sBAfV,SAeiCN,EAAW,SAAW,SACvD,wBACAY,QAAS,kBAAMR,GD7BJa,EC6BwBnB,EAAKoB,GD5B9C,CACFX,KAAKZ,EACLoB,QAASE,KAHV,IAAoBA,GC8BXX,UAAU,qBAFV,4BCvBDa,MAbf,SAAkBC,GACd,IAAIC,EAAQC,aAAY,SAAAC,GAAK,OAAIA,KACjC,OACI,qBAAKjB,UAAU,YAAf,SACI,qBAAKA,UAAU,OAAf,SACEe,EAAMG,KAAI,SAAA1B,GACR,OAAO,cAAC,EAAD,CAAwBA,KAAMA,GAAfA,EAAKoB,Y,QCuB5BO,MA7Bf,SAAmBL,GAAQ,IAAD,EACArB,qBADA,mBACjBG,EADiB,KACXC,EADW,KAElBC,EAAWC,cACf,OACI,8BACA,qBAAKC,UAAU,YAAf,SACG,sBAAKA,UAAU,UAAf,UACI,uBACAG,SAAU,SAACC,GAAD,OAAOP,EAAQO,EAAEC,OAAOH,QAClCA,MAAON,EACPK,KAAK,OACLD,UAAU,qBACV,wBACAM,QAAS,WHZjB,IAAiBd,EGaRM,GHbQN,EGcL,CACIoB,GAAIQ,cACJxB,KAAKA,GHflB,CACFK,KAAKb,EACLqB,QAASjB,MGkBFQ,UAAU,uBAVV,yB,MCHAqB,MATf,WACE,OACE,sBAAKrB,UAAU,UAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,QCGSsB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,gBCPHR,EAAM,CACb,CACIH,GAAG,EACHhB,KAAK,OAET,CACIgB,GAAG,EACHhB,KAAK,OAET,CACIgB,GAAG,EACHhB,KAAK,UCPFmC,EAAQC,aCDE,WAA6B,IAC1CC,EADchB,EAA2B,uDAAnBF,EAAOmB,EAAY,uCAE7C,OAAQA,EAAOjC,MACX,KAAKb,EAGD,OAFA6C,EAAQ,YAAOhB,IACNkB,KAAKD,EAAOzB,SACdwB,EACX,KAAK5C,EAGD,OADA4C,GADAA,EAAQ,YAAOhB,IACKmB,QAAO,SAAA5C,GAAI,OAAIA,EAAKoB,IAAMsB,EAAOzB,WAEzD,KAAKnB,EACD2C,EAAQ,YAAOhB,GAEf,IADA,IAAIoB,GAAS,EACLC,EAAE,EAAEA,EAAGL,EAASM,SACpBF,IACGJ,EAASK,GAAG1B,IAAMsB,EAAOzB,QAAQG,IAFT0B,KAO/B,IAAa,GAAVD,EAEC,OADAJ,EAASI,GAAUH,EAAOzB,QACnBwB,EAInB,OAAOhB,KCtBXuB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUX,MAAOA,EAAjB,SACA,cAAC,EAAD,QAGFY,SAASC,eAAe,SAM1BtB,M","file":"static/js/main.b2061cbc.chunk.js","sourcesContent":["export const ADD_TODO    = \"ADD_TODO\";\r\nexport const DELETE_TODO = \"DELETE_TODO\";\r\nexport const UPDATE_TODO = \"UPDATE_TODO\";\r\n\r\n\r\n\r\nexport function addTodo(todo){\r\n    return{\r\n        type:ADD_TODO,\r\n        payload: todo,\r\n    }\r\n}\r\n\r\nexport function deleteTodo(todoId){\r\n    return{\r\n        type:DELETE_TODO,\r\n        payload: todoId,\r\n    }\r\n}\r\n\r\nexport function updateTodo(todo){\r\n    return{\r\n        type:UPDATE_TODO,\r\n        payload: todo,\r\n    }\r\n}","import React, { useState,Fragment } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { deleteTodo, updateTodo } from '../redux/actions';\r\n\r\nimport ArrowRightIcon from '@material-ui/icons/ArrowRight';\r\n\r\nfunction TodoItem({todo}) {\r\n    const [editable, setEditable] = useState(false);\r\n    const [name, setName] = useState(todo.name);\r\n    let dispatch = useDispatch();\r\n    return (\r\n        <div>   \r\n            <div className=\"row mx-2 align-items-center\">\r\n            <Fragment>\r\n                <div>{<ArrowRightIcon />}</div>\r\n                <div className=\"col\">\r\n                { editable ? \r\n                <input \r\n                type='text' \r\n                className='form-control' \r\n                value={name}\r\n                onChange={\r\n                    (e) => setName(e.target.value)\r\n                } /> :  <h4>{todo.name}</h4>  }\r\n                </div>\r\n                <button\r\n                onClick={() => {\r\n                    console.log(\"update\");\r\n                    dispatch(updateTodo(\r\n                        {\r\n                            ...todo,\r\n                            name:name\r\n                        }\r\n                    ))\r\n                    if(editable){\r\n                        setName(todo.name);\r\n                    }\r\n                     setEditable(!editable); \r\n                     \r\n                }}\r\n                className=\"btn btn-primary m-2\">{editable ? \"Update\" : \"Edit\" }</button>\r\n                <button\r\n                onClick={() => dispatch(deleteTodo(todo.id))}\r\n                className=\"btn btn-danger m-2\">Delete</button>\r\n                </Fragment>\r\n            </div>\r\n        </div>     \r\n    \r\n    );\r\n}\r\n\r\nexport default TodoItem;","import React, { useState  } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport TodoItem from './TodoItem';\r\n\r\n\r\nfunction TodoList(props) {\r\n    let todos = useSelector(state => state)\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"my-5\">\r\n            { todos.map(todo => {\r\n                return <TodoItem key={todo.id} todo={todo}/>\r\n            })}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TodoList;","import React, { useState } from 'react';\r\nimport { addTodo } from \"../redux/actions\";\r\nimport {v1 as uuid } from 'uuid';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nfunction TodoInput(props) {\r\n    let [name, setName] = useState();\r\n    let dispatch = useDispatch();\r\n    return (\r\n        <div> \r\n        <div className=\"container\"> \r\n           <div className=\"row m-2\">\r\n               <input \r\n               onChange={(e) => setName(e.target.value)}\r\n               value={name}\r\n               type=\"text\"\r\n               className=\"col form-control\"/>\r\n               <button\r\n               onClick={()=>{\r\n                dispatch(addTodo(\r\n                   {\r\n                       id: uuid(),\r\n                       name:name\r\n                   }    \r\n                      )\r\n            \r\n                )} }\r\n               className=\"btn btn-primary mx-2\">Add</button>\r\n               </div>\r\n        </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TodoInput;","import './App.css';\nimport TodoList from './components/TodoList';\nimport TodoInput from './components/TodoInput';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nfunction App() {\n  return (\n    <div className=\"App m-5\">\n      <TodoInput />\n      <TodoList />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export let todos=[\r\n    {\r\n        id:1,\r\n        name:\"one\",\r\n    },\r\n    {\r\n        id:2,\r\n        name:\"two\",\r\n    },\r\n    {\r\n        id:3,\r\n        name:\"three\",\r\n    }\r\n]","import { createStore } from \"redux\";\r\nimport { reducer } from \"./reducer\";\r\n\r\n\r\nexport let store = createStore(reducer);","import { ADD_TODO,DELETE_TODO,UPDATE_TODO } from \"./actions\";\r\nimport {todos} from './states'\r\n\r\nexport let reducer = (state = todos ,action) =>  {\r\n    let newTodos;\r\n    switch (action.type) {\r\n        case ADD_TODO:\r\n            newTodos = [...state];\r\n            newTodos.push(action.payload);\r\n            return newTodos;\r\n        case DELETE_TODO:\r\n            newTodos = [...state];\r\n            newTodos = newTodos.filter(todo => todo.id != action.payload);\r\n            return newTodos;\r\n        case UPDATE_TODO:  \r\n            newTodos = [...state];\r\n            let index = -1;\r\n            for(let i=0;i< newTodos.length;i++){\r\n                index++;\r\n                if(newTodos[i].id == action.payload.id){\r\n                    break;\r\n                }\r\n                \r\n            }\r\n            if(index != -1){\r\n                newTodos[index] =  action.payload\r\n                return newTodos;\r\n            }\r\n            \r\n    }\r\n    return state;\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from \"react-redux\";\nimport {store} from './redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n    <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}